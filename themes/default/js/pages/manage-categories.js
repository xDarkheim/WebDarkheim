/**
 * MANAGE CATEGORIES PAGE JAVASCRIPT - DARKHEIM STUDIO
 * Enhanced Category Management functionality
 * No animations for improved performance
 */

class ManageCategoriesController {
    constructor() {
        this.init();
    }

    init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeComponents());
        } else {
            this.initializeComponents();
        }
    }

    initializeComponents() {
        this.initializeCategoryManagement();
        this.initializeFormValidation();
    }

    // Initialize category management functionality
    initializeCategoryManagement() {
        const nameInput = document.getElementById('category_name');
        const slugInput = document.getElementById('category_slug');

        if (nameInput && slugInput) {
            nameInput.addEventListener('input', () => {
                if (!slugInput.value || slugInput.dataset.autoGenerated !== 'false') {
                    const slug = this.generateSlug(nameInput.value);
                    slugInput.value = slug;
                    slugInput.dataset.autoGenerated = 'true';
                }
            });

            slugInput.addEventListener('input', () => {
                slugInput.dataset.autoGenerated = 'false';
            });
        }
    }

    // Initialize form validation
    initializeFormValidation() {
        const categoryForm = document.querySelector('.category-form');
        if (categoryForm) {
            categoryForm.addEventListener('submit', this.validateCategoryForm.bind(this));
        }
    }

    // Generate URL-friendly slug
    generateSlug(text) {
        return text
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '') // Remove special characters
            .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
            .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
    }

    // Focus on create form
    focusCreateForm() {
        const form = document.getElementById('create-category-form');
        const nameInput = document.getElementById('category_name');

        if (form) {
            form.scrollIntoView({ behavior: 'smooth', block: 'start' });
            setTimeout(() => {
                if (nameInput) {
                    nameInput.focus();
                }
            }, 300); // Reduced timeout for better performance
        }
    }

    // Clear form
    clearForm() {
        const nameInput = document.getElementById('category_name');
        const slugInput = document.getElementById('category_slug');

        if (nameInput) nameInput.value = '';
        if (slugInput) {
            slugInput.value = '';
            slugInput.dataset.autoGenerated = 'true';
        }

        if (nameInput) nameInput.focus();
    }

    // Enhanced form validation
    validateCategoryForm(event) {
        const nameInput = document.getElementById('category_name');
        const slugInput = document.getElementById('category_slug');

        const errors = [];

        // Validate category name
        if (!nameInput || !nameInput.value.trim()) {
            errors.push('Category name is required');
        }

        if (nameInput && nameInput.value.trim().length > 100) {
            errors.push('Category name is too long (max 100 characters)');
        }

        // Validate slug format
        if (slugInput && slugInput.value && !slugInput.value.match(/^[a-z0-9]+(?:-[a-z0-9]+)*$/)) {
            errors.push('Slug can only contain lowercase letters, numbers, and hyphens');
        }

        // Show errors if any
        if (errors.length > 0) {
            event.preventDefault();
            this.showValidationErrors(errors);
            return false;
        }

        return true;
    }

    // Show validation errors
    showValidationErrors(errors) {
        // Remove existing error messages
        this.clearValidationErrors();

        // Add error styling to form
        const form = document.querySelector('.category-form');
        if (form) {
            form.classList.add('has-errors');
        }

        // Show alert with errors
        alert('Please fix the following errors:\n\n' + errors.join('\n'));

        // Focus on first problematic field
        const nameInput = document.getElementById('category_name');
        if (nameInput && !nameInput.value.trim()) {
            nameInput.focus();
            nameInput.classList.add('error');
        }
    }

    // Clear validation errors
    clearValidationErrors() {
        const form = document.querySelector('.category-form');
        if (form) {
            form.classList.remove('has-errors');
        }

        // Remove error classes from inputs
        document.querySelectorAll('.form-control.error').forEach(input => {
            input.classList.remove('error');
        });
    }

    // Real-time validation
    validateFieldRealTime(field) {
        if (!field) return;

        field.addEventListener('blur', () => {
            const fieldName = field.name;
            let isValid = true;

            switch (fieldName) {
                case 'category_name':
                    if (!field.value.trim()) {
                        this.showFieldError(field, 'Category name is required');
                        isValid = false;
                    } else if (field.value.trim().length > 100) {
                        this.showFieldError(field, 'Category name is too long');
                        isValid = false;
                    } else {
                        this.clearFieldError(field);
                    }
                    break;

                case 'category_slug':
                    if (field.value && !field.value.match(/^[a-z0-9]+(?:-[a-z0-9]+)*$/)) {
                        this.showFieldError(field, 'Invalid slug format');
                        isValid = false;
                    } else {
                        this.clearFieldError(field);
                    }
                    break;
            }

            return isValid;
        });
    }

    // Show field-specific error
    showFieldError(field, message) {
        field.classList.add('error');

        // Remove existing error message
        const existingError = field.parentNode.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }

        // Add new error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }

    // Clear field-specific error
    clearFieldError(field) {
        field.classList.remove('error');
        const errorMessage = field.parentNode.querySelector('.error-message');
        if (errorMessage) {
            errorMessage.remove();
        }
    }

    // Count categories
    updateCategoryCount() {
        const rows = document.querySelectorAll('.category-row');
        const countElement = document.querySelector('.categories-count');
        if (countElement) {
            countElement.textContent = `(${rows.length})`;
        }
    }

    // Confirm delete action
    confirmDelete(categoryName, categoryId) {
        const message = `Are you sure you want to delete the category "${categoryName}"?\n\nThis action cannot be undone.`;
        return confirm(message);
    }

    // Handle form reset
    handleFormReset() {
        const resetButton = document.querySelector('.btn-secondary[type="reset"]');
        if (resetButton) {
            resetButton.addEventListener('click', (e) => {
                e.preventDefault();
                this.clearForm();
                this.clearValidationErrors();
            });
        }
    }

    // Initialize real-time validation for all fields
    initializeRealTimeValidation() {
        const nameInput = document.getElementById('category_name');
        const slugInput = document.getElementById('category_slug');

        if (nameInput) this.validateFieldRealTime(nameInput);
        if (slugInput) this.validateFieldRealTime(slugInput);
    }

    // Handle keyboard shortcuts
    initializeKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Enter to submit form
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                const form = document.querySelector('.category-form');
                if (form && document.activeElement && form.contains(document.activeElement)) {
                    e.preventDefault();
                    form.dispatchEvent(new Event('submit', { cancelable: true }));
                }
            }

            // Escape to clear form
            if (e.key === 'Escape') {
                const nameInput = document.getElementById('category_name');
                if (nameInput && document.activeElement === nameInput) {
                    this.clearForm();
                }
            }
        });
    }

    // Initialize all enhanced features
    initializeEnhancedFeatures() {
        this.handleFormReset();
        this.initializeRealTimeValidation();
        this.initializeKeyboardShortcuts();
        this.updateCategoryCount();
    }
}

// Global functions for backward compatibility
let manageCategoriesController;

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        manageCategoriesController = new ManageCategoriesController();
        manageCategoriesController.initializeEnhancedFeatures();
    });
} else {
    manageCategoriesController = new ManageCategoriesController();
    manageCategoriesController.initializeEnhancedFeatures();
}

// Export global functions for backward compatibility
window.focusCreateForm = function() {
    if (manageCategoriesController) {
        manageCategoriesController.focusCreateForm();
    }
};

window.clearForm = function() {
    if (manageCategoriesController) {
        manageCategoriesController.clearForm();
    }
};

window.generateSlug = function(text) {
    if (manageCategoriesController) {
        return manageCategoriesController.generateSlug(text);
    }
    return text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
};
